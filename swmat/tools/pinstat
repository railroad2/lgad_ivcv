#!/usr/bin/env python3
import sys
import argparse
import json
import asyncio

from os.path import join, split

sys.path.insert(0, join(*(split(sys.path[0])[:-1])))
import wstools
import usbtools

def pinstat_usb(ch=None, frame=True, color=True):
    port = usbtools.find_pico_ports()[0]
    usbtools.pinstat(ch, frame, color, port=port)

async def pinstat_ws(ch=None, frame=True, color=True):
    payload = {"cmd":"get"}
    pins = await wstools.send_data_once(json.dumps(payload))
    wstools.print_with_frame(pins, ch, frame, color) 

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("items", nargs="*", help="Channel numbers")
    parser.add_argument("--noframe", action="store_false", help="No frame printed.") 
    parser.add_argument("--nocolor", action="store_false", help="No colored printed.") 
    parser.add_argument("--usb", action="store_true", help="Use usb serial instead of websocket.")
    parser.add_argument("-v", action="store_true", help="print verbose.")
    args = parser.parse_args()

    if (len(args.items) == 0):
        ch = []
    elif (args.items[0] == 'all'):
        ch = []
    else: 
        ch = [int(i) for i in args.items]

    if len(ch) == 0:
        ch = None

    if args.usb:
        pinstat_usb(ch, args.noframe, args.nocolor)
        if args.v: print ("using usb serial")
    else:
        try:
            asyncio.run(pinstat_ws(ch, args.noframe, args.nocolor))
            if args.v: print ("using websocket")
        except ConnectionRefusedError:
            pinstat_usb(ch, args.noframe, args.nocolor)
            if args.v: print ("using usb serial")

    
if __name__=="__main__":
    main()
