#!/usr/bin/env python3
import sys
import argparse
import asyncio

from os.path import join, split

sys.path.insert(0, join(*(split(sys.path[0])[:-1])))
import wstools
import usbtools

def off_usb(ch=None, show=True, frame=True, color=True):
    usbtools.sw_onoff(ch, False)
    if show:
        usbtools.pinstat(None, frame, color)

async def off_ws(ch=None, show=True, frame=True, color=True):
    await wstools.sw_onoff(ch, False)
    if show:
        await wstools.pinstat(ch, frame, color)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("items", nargs="+", help="Channel numbers")
    parser.add_argument("--usb", action="store_true", help="Use usb serial instead of websocket.")
    parser.add_argument("--websocket", action="store_true", help="Try websocket only.")
    parser.add_argument("--silence", action="store_false", help="Do not print out the pinstat")
    args = parser.parse_args()

    ch = [int(i) for i in args.items]
    show = args.silence

    if args.usb:
        off_usb(ch, show)
    else: 
        try:
            asyncio.run(off_ws(ch, show))
        except ConnectionRefusedError:
            if not args.websocket:
                off_usb(ch, show)
            else:
                raise ConnectionRefusedError(e)
    
if __name__=="__main__":
    main()
